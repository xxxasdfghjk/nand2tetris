// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl
/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the two output bits:
 * if (out == 0) zr = 1, else zr = 0
 * if (out < 0)  ng = 1, else ng = 0
 */
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT 
        out[16], // 16-bit output
        zr,      // if (out == 0) equals 1, else 0
        ng;      // if (out < 0)  equals 1, else 0

    PARTS:
    //x
    Not(in=zx,out=xzeror);

    And16(a=x,b[0]=xzeror,
    b[1]=xzeror,
    b[2]=xzeror,
    b[3]=xzeror,
    b[4]=xzeror,
    b[5]=xzeror,
    b[6]=xzeror,
    b[7]=xzeror,
    b[8]=xzeror,
    b[9]=xzeror,
    b[10]=xzeror,
    b[11]=xzeror,
    b[12]=xzeror,
    b[13]=xzeror,
    b[14]=xzeror,
    b[15]=xzeror,
    out=xo1);
    
    Not16(in=xo1,out=xnoto1);
    Mux16(a=xo1,b=xnoto1,sel=nx,out=xo2);

    //y
    Not(in=zy,out=yzeror);
    And16(a=y, 
    b[0]=yzeror,
    b[1]=yzeror,
    b[2]=yzeror,
    b[3]=yzeror,
    b[4]=yzeror,
    b[5]=yzeror,
    b[6]=yzeror,
    b[7]=yzeror,
    b[8]=yzeror,
    b[9]=yzeror,
    b[10]=yzeror,
    b[11]=yzeror,
    b[12]=yzeror,
    b[13]=yzeror,
    b[14]=yzeror,
    b[15]=yzeror,
    out=yo1);

    Not16(in=yo1,out=ynoto1);
    Mux16(a=yo1,b=ynoto1,sel=ny,out=yo2);

    Add16(a=xo2,b=yo2,out=xpy);
    And16(a=xo2,b=yo2,out=xay);

    Mux16(a=xay,b=xpy,sel=f,out=xyo1);

    Not16(in=xyo1,out=xynoto1);
    Mux16(a=xyo1,b=xynoto1,sel=no,out=res);
    Not16(in=res,out=n1);
    Not16(in=n1,out=out);
    
    Or16Way(in=res,out=sigres);
    Not(in=sigres,out=zr);

    IsNegative(in=res,out=ng);
    


    
    
    

    //// Replace this comment with your code.
}